# https://github.com/vfrank66/awsbatchlaunchtemplate/blob/master/aws-batch-launch-ami.yaml
# consider using this flow in the future.
---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS Cloudformation for deploying AWS Batch.'
Parameters:
  AwsAccessKey:
    Type: String
    Description: AWS access key for accessing S3 objects
  AwsSecretKey:
    Type: String
    Description: AWS secret key for accessing S3 objects
  SpringProfile:
    Type: String
    Default: sample
    Description: Spring profile to indicate freud's action
  IdentiqMember:
    Type: String
    Description: Identiq member's name for docker image name
  TxnPath:
    Type: String
    Default: s3a://identiq-freud/sample
    Description: Value for IDQ_TRANSACTIONS_PATH environment variable
  EventsPath:
    Type: String
    Description: Value for IDQ_EVENTS_PATH environment variable
  OutputPath:
    Type: String
    Default: s3a://identiq-freud/events
    Description: Value for IDQ_S3_OUT_PATH environment variable
  DockerCreds:
    Type: String
    Description: Base64 of docker creds in the format of username:password
  DockerEmail:
    Type: String
    Description: Email of the docker user registered in the docker registry
Mappings:

  VpcIpRanges:
    Option1:
      VPC: 10.0.0.0/16
      PublicSubnetA: 10.0.64.0/20
      PublicSubnetB: 10.0.80.0/20
      PublicSubnetC: 10.0.96.0/20
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap [ VpcIpRanges, Option1, VPC ]
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [ VpcIpRanges, Option1, PublicSubnetA ]
      MapPublicIpOnLaunch: 'True'
      AvailabilityZone: !Select
        - 0
        - !GetAZs ""
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PublicSubnetA"

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: 'True'
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [ VpcIpRanges, Option1, PublicSubnetB ]
      AvailabilityZone: !Select
        - 1
        - !GetAZs ""
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PublicSubnetB"
  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: 'True'
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [ VpcIpRanges, Option1, PublicSubnetC ]
      AvailabilityZone: !Select
        - 2
        - !GetAZs ""
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PublicSubnetC"
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PublicSubnets"

  InternetGatewayRoute:
    Type: AWS::EC2::Route
    # DependsOn is mandatory because route targets InternetGateway
    # See here: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-dependson.html#gatewayattachment
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref RouteTable

  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref RouteTable

  PublicSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetC
      RouteTableId: !Ref RouteTable
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EC2 Security Group for instances launched in the VPC by Batch
      VpcId:
        Ref: VPC
  BatchServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: batch.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
  IamInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: EcsInstanceRole
  EcsInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2008-10-17'
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
  JobDefinition:
    Type: AWS::Batch::JobDefinition
    Properties:
      Type: container
      ContainerProperties:
        Image: !Sub 'identiq-internal-docker-freud.jfrog.io/freud-${IdentiqMember}:master'
        Vcpus:  14
        Memory: 50000
        Environment:
          - Name: IDQ_SPRING_PROFILE
            Value:
              Ref: SpringProfile
          - Name: IDQ_MEMORY_TMP_PATH
            Value: /var/app/output/tmp
          - Name: IDQ_TRANSACTIONS_PATH
            Value:
              Ref: TxnPath
          - Name: IDQ_S3_ACCESS_KEY
            Value:
              Ref: AwsAccessKey
          - Name: IDQS_S3_SECRET_KEY
            Value:
              Ref: AwsSecretKey
          - Name: IDQ_S3_OUT_PATH
            Value:
              Ref: OutputPath
          - Name: IDQ_PRE_CLEAN_OUTPUT
            Value: false
          - Name: IDQ_LOGGING_ENABLED
            Value: false
          - Name: IDQ_EVENTS_PATH
            Value:
              Ref: EventsPath
      RetryStrategy:
        Attempts: 1
  SpecialComputeLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeType: gp2
              VolumeSize: '1024'
              DeleteOnTermination: 'true'
        UserData:
          "Fn::Base64": !Sub |
            Content-Type: multipart/mixed; boundary="==BOUNDARY=="
            MIME-Version: 1.0

            --==BOUNDARY==
            MIME-Version: 1.0
            Content-Type: text/x-shellscript; charset="us-ascii"

            #!/bin/bash
            echo ECS_CLUSTER=ComputeEnvironment-3ed0faebc41c7a1_Batch_aa4a5ab7-604c-3a50-809c-565cd02a2508>>/etc/ecs/ecs.config
            echo ECS_DISABLE_IMAGE_CLEANUP=false>>/etc/ecs/ecs.config
            echo ECS_ENGINE_TASK_CLEANUP_WAIT_DURATION=2m>>/etc/ecs/ecs.config
            echo ECS_IMAGE_CLEANUP_INTERVAL=10m>>/etc/ecs/ecs.config
            echo ECS_IMAGE_MINIMUM_CLEANUP_AGE=10m>>/etc/ecs/ecs.config
            echo ECS_NUM_IMAGES_DELETE_PER_CYCLE=5>>/etc/ecs/ecs.config
            echo ECS_RESERVED_MEMORY=32>>/etc/ecs/ecs.config
            echo ECS_ENGINE_AUTH_TYPE=dockercfg >> /etc/ecs/ecs.config
            echo 'ECS_ENGINE_AUTH_DATA={"identiq-internal-docker-freud.jfrog.io":{"auth":"${DockerCreds}","email":"${DockerEmail}"}}' >> /etc/ecs/ecs.config

            --==BOUNDARY==--

  JobQueue:
    Type: AWS::Batch::JobQueue
    Properties:
      Priority: 1
      ComputeEnvironmentOrder:
        - Order: 1
          ComputeEnvironment:
            Ref: ComputeEnvironment
  ComputeEnvironment:
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      Type: MANAGED
      ComputeResources:
        Type: EC2
        MinvCpus: 1
        MaxvCpus: 64
        InstanceTypes:
          - m5.4xlarge
        LaunchTemplate:
          LaunchTemplateId: !Ref SpecialComputeLaunchTemplate
          Version: !GetAtt SpecialComputeLaunchTemplate.LatestVersionNumber
        Subnets:
          - Ref: PublicSubnetA
          - Ref: PublicSubnetB
          - Ref: PublicSubnetC
        SecurityGroupIds:
          - Ref: SecurityGroup
        InstanceRole:
          Ref: IamInstanceProfile
      ServiceRole:
        Ref: BatchServiceRole
Outputs:
  ComputeEnvironmentArn:
    Value:
      Ref: ComputeEnvironment
  JobQueueArn:
    Value:
      Ref: JobQueue
  JobDefinitionArn:
    Value:
      Ref: JobDefinition
