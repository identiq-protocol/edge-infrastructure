# More examples of Codefresh YAML can be found at
# https://codefresh.io/docs/docs/yaml-examples/examples/

version: "1.0"
stages:
 - 'Clone'
 - 'Copy module variables'
 - 'Generate docs'
 - 'Commit and push'
 - 'Create release'
steps:
  clone:
    title: "Cloning repository"
    type: "git-clone"
    repo: "identiq-protocol/edge-infrastructure"
    # CF_BRANCH value is auto set when pipeline is triggered
    # Learn more at codefresh.io/docs/docs/codefresh-yaml/variables/
    revision: "${{CF_BRANCH}}"
    git: "codefresh"
    stage: "Clone"
  copy_module_variables:
   title: Copy module variables into the example directory
   stage: "Copy module variables"
   type: parallel
   steps:
     aws_copy_variables:
       image: alpine:3.14.1
       title: aws
       working_directory: /codefresh/volume/${{CF_REPO_NAME}}
       commands:
         - cp modules/aws/variables.tf examples/aws/
     azure_copy_variables:
       image: alpine:3.14.1
       title: azure
       working_directory: /codefresh/volume/${{CF_REPO_NAME}}
       commands:
         - cp modules/azure/variables.tf examples/azure/
     gcp_copy_variables:
       image: alpine:3.14.1
       title: gcp
       working_directory: /codefresh/volume/${{CF_REPO_NAME}}
       commands:
         - cp modules/gcp/variables.tf examples/gcp/
  docs:
   title: Generate aws, azure and gcp terraform docs
   stage: "Generate docs"
   type: parallel
   steps:
     aws_docs:
       image: cytopia/terraform-docs:0.14.1
       title: aws
       working_directory: /codefresh/volume/${{CF_REPO_NAME}}/modules/aws
       commands:
         - terraform-docs markdown . --output-mode replace --header-from ../../codefresh/aws-docs-header.md --output-file README.md
     azure_docs:
       image: cytopia/terraform-docs:0.14.1
       title: azure
       working_directory: /codefresh/volume/${{CF_REPO_NAME}}/modules/azure
       commands:
         - terraform-docs markdown . --output-mode replace --header-from ../../codefresh/azure-docs-header.md --output-file README.md
     gcp_docs:
       image: cytopia/terraform-docs:0.14.1
       title: gcp
       working_directory: /codefresh/volume/${{CF_REPO_NAME}}/modules/gcp
       commands:
         - terraform-docs markdown . --output-mode replace --header-from ../../codefresh/gcp-docs-header.md --output-file README.md
  check_diff:
    title: Check if variable and doc files have changed
    stage: "Commit and push"
    image: alpine/git:latest
    working_directory: /codefresh/volume/${{CF_REPO_NAME}}
    fail_fast: false
    commands:
      - git diff --exit-code examples/aws/variables.tf 
      - git diff --exit-code examples/azure/variables.tf 
      - git diff --exit-code examples/gcp/variables.tf 
      - git diff --exit-code modules/aws/README.md 
      - git diff --exit-code modules/azure/README.md 
      - git diff --exit-code modules/gcp/README.md 
  commit_and_push:
    title: Commit changes and push auto genereted files 
    stage: "Commit and push"
    type: git-commit
    when:
      steps:
       - name: check_diff
         on:
           - failure
    arguments:
      repo: '${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}'
      git: github
      working_directory: '/codefresh/volume/${{CF_REPO_NAME}}'
      commit_message: Automated docs and variables updates
      git_user_name: codefresh-ci
      git_user_email: codefresh@identiq.com
      allow_empty: false
      add:
        - examples/aws/variables.tf
        - examples/azure/variables.tf
        - examples/gcp/variables.tf
        - modules/aws/README.md
        - modules/azure/README.md
        - modules/gcp/README.md
  get_latest_tag:
    title: get latest tag 
    stage: "Create release"
    image: alpine/git:latest
    working_directory: /codefresh/volume/${{CF_REPO_NAME}}
    commands:
      - git checkout master
      - cf_export LATEST_TAG=`git tag --sort=committerdate | tail -1`
      - git checkout $CF_BRANCH
  bumpVersion:
    type: semversioner
    stage: "Create release"
    arguments:
      SEMVERSIONER_VERSION: ${{LATEST_TAG}}
      SEMVERSIONER_ACTION: bump
      SEMVERSIONER_PART: patch
  checkVersion:
    stage: "Create release"
    image: alpine
    commands:
    - 'echo VERSION=${{steps.bumpVersion.output.SEMVERSIONER_RESULT}}'
  github_release:
    type: github-release
    stage: "Create release"
    title: Typical usage example
    description: |-
      The git_context_name, repo_owner and repo_name vars
      will be taken automatically from the trigger.
      Requires the pipeline to be started by a github trigger
    arguments:
      release_name: ${{SEMVERSIONER_RESULT}}
      release_tag: ${{SEMVERSIONER_RESULT}}
